#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

const int dx[] = {0,0,1,-1};
const int dy[] = {1,-1,0,0};
class CovidCinema {
public:
	vector <string> seat(int R, int C, int A, int B) {

		vector<string> a(R,string(C,'.'));
		vector<vector<bool>> used(R,vector<bool>(C));


		queue<pair<int,int>> queue;
		queue.push({0,0});

		used[0][0] = true;
		while(A > 0){
		    pair<int,int> front = queue.front();
		    queue.pop();
		    a[front.first][front.second] = 'A';

            for (int i = 0; i < 4; ++i) {
                int x1 = front.first + dx[i];
                int y1 = front.second + dy[i];

                if (0 <= x1 && x1 < R && 0 <= y1 && y1 < C && !used[x1][y1]){
                    queue.push({x1,y1});
                    used[x1][y1] = true;
                }
            }
		    A--;
		}

        while (!queue.empty()) queue.pop();

        queue.push({R - 1,C - 1});
        used[R - 1][C - 1] = true;
        while(B > 0){
            pair<int,int> front = queue.front();
            queue.pop();
            a[front.first][front.second] = 'B';

            for (int i = 0; i < 4; ++i) {
                int x1 = front.first + dx[i];
                int y1 = front.second + dy[i];

                if (0 <= x1 && x1 < R && 0 <= y1 && y1 < C && !used[x1][y1]){
                    queue.push({x1,y1});
                    used[x1][y1] = true;
                }
            }
            B--;
        }


        for (int i = 0; i < R; ++i) {
            for (int j = 0; j < C; ++j) {

                for (int k = 0; k < 4; ++k) {

                    int x1 = i + dx[k];
                    int y1 = j + dy[k];
                    if (0 <= x1 && x1 < R && 0 <= y1 && y1 < C && isalpha(a[i][j]) && isalpha(a[x1][y1]) && a[i][j] != a[x1][y1]){
                        return {};
                    }
                }


            }
        }
        return a;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, vector <string> p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	CovidCinema *obj;
	vector <string> answer;
	obj = new CovidCinema();
	clock_t startTime = clock();
	answer = obj->seat(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	vector <string> p4;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 6;
	p2 = 2;
	p3 = 3;
	string t4[] = {"......",".A..BB","......","B.A..."};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 5;
	p2 = 13;
	p3 = 7;
	p4.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 5;
	p2 = 14;
	p3 = 2;
	string t4[] = {"B.AAA",".AAAA","AAAA.","AAA.B"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 5;
	p2 = 17;
	p3 = 4;
	string t4[] = {"AAAAA","AAAAA","..AAA","BB.AA","BB.AA"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
